/**
 * Write a description of Part1 here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Part1 {
public int findStopCodon(String dna, int startIndex, String stopCodon){
int currIndex = dna.indexOf(stopCodon, startIndex+3);
int diff = currIndex - startIndex;
while(currIndex != -1){
if(diff % 3 == 0) {
return currIndex;
}
else{
currIndex = dna.indexOf(stopCodon, currIndex + 1);
}
}
return dna.length();      // method needs return;
}

public void testFindStopCodon(){
String dna = "xxxyyyzzzTAAxxxyyyzzzTAAxx";
int result = findStopCodon(dna, 0, "TAA");
if (result != 9){
System.out.println("error on 9");
}
result = findStopCodon(dna, 1, "TAA");
if (result != -1){
System.out.println("error on 26");
}
System.out.println("test finished");
}

public String findGene(String dna){
int startIndex = dna.indexOf("ATG");
if (startIndex == -1){
 return " ";
}
int taaIndex = findStopCodon(dna, startIndex, "TAA");
int tgaIndex = findStopCodon(dna, startIndex, "TGA");
int stopIndex = 0;
if (taaIndex == -1 || tgaIndex != -1 || taaIndex > tgaIndex){
stopIndex = tgaIndex;
}
else {
stopIndex = taaIndex;
}
if (stopIndex == -1){
return " ";
}
return dna.substring(startIndex, stopIndex +3);
}

public void testFindGene(){
String dna = "ATGCCCGGGAAATAACCC";
System.out.println(dna);
String gene = findGene(dna);
if(! gene.equals("ATGCCCGGGAAATAA")){
System.out.println("error");
}
System.out.println("test finished");
}

public void printAllGenes(String dna){
int startIndex = 0;
while (true){
String currentGene = findGene(dna);
if (currentGene.isEmpty()){
break;
}
System.out.println(currentGene);
}
}
}
